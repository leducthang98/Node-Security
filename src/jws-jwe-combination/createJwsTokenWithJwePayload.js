const jws = require('jws');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const path = require('path')
const crypto = require('crypto')

const privateKey = fs.readFileSync(path.join(__dirname, '/../credientals/privateKey.pem.private'))
const publicKey = fs.readFileSync(path.join(__dirname, '/../credientals/publicKey.pem.public'))

function generateJwsTokenWithJwePayload(claims) {

    let signOptions = {
        issuer: 'leducthang98',
        subject: 'leducthang98@gmail.com',
        expiresIn: "12h",
        algorithm: "RS256",
        header: {
            kid: 'leducthang98', // for other resource can verify jws token
        }
    };

    // payload encoded by publicKey and change to base64 format
    const claimsEncrypted = crypto.publicEncrypt(publicKey, Buffer.from(JSON.stringify(claims), 'utf8')).toString('base64')

    // jws generated by privateKey
    const jwtToken = jwt.sign({
        payloadEncrypted: claimsEncrypted
    }, privateKey, signOptions)

    return jwtToken

}

const jwsTokenGenetatedWithJwe = generateJwsTokenWithJwePayload({
    data: 'this is payload',
    role: 'admin'
})

fs.writeFileSync(path.join(__dirname, '/../credientals/jws-with-jwe/token'), jwsTokenGenetatedWithJwe)